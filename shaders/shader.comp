#version 450
#define PI 3.141592653589

vec3 velocity_;
vec3 position_;
float mass_;

struct Particle {
  vec4 position;
  vec3 velocity;
  float movable;
  vec3 acceleration;
  float density;
};

layout(binding = 0) uniform MVP {
  mat4 model;
  mat4 view;
  mat4 proj;
  vec3 cameraPos;
  float deltaTime;
}
mvp;

layout(std140, binding = 1) readonly buffer ParticleSSBOIn {
  Particle particlesIn[];
};

layout(std140, binding = 2) buffer ParticleSSBOOut { Particle particlesOut[]; };

layout(binding = 3) uniform Attributes {
  vec3 center;
  int numberOfParticles;
  float smootingLength;
  float mass;
  float stateConstant;
  float polytropicIndex;
  float damping;
  float dampingAcceleration;
  float dampingVelocity;
  float gravity;
  float timeStep;
  int stop;
  vec2 pad;
}
attributes;

layout(push_constant) uniform Constants { int stageIndex; }
constants;

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

float W(float length) {
  float h = attributes.smootingLength;
  return pow(1.0 / (h * sqrt(PI)), 3) * exp((-length * length) / (h * h));
}

vec3 gradW(vec3 position) {
  float r = length(position);
  float h = attributes.smootingLength;
  return position * -2.0 * exp(-r * r / h * h) /
         (h * h * h * h * h * pow(PI, 1.5));
}

float getDensity(vec3 position) {
  float density = 0.0f;
  for (int i = 0; i < attributes.numberOfParticles; i++) {
    vec3 neighborPosition = particlesIn[i].position.xyz;
    float distance = length(position - neighborPosition);
    if (distance <= attributes.smootingLength)
      density += mass_ * W(distance);
  }
  return density;
}

float getPressure(float density) {
  return attributes.stateConstant *
         pow(density, 1.0 + 1.0 / attributes.polytropicIndex);
}

vec3 getGravity() {
  if (attributes.gravity == 0.0f)
    return vec3(0.0f);

  vec4 transformedGravity4 =
      (inverse(mvp.model)) * vec4(0.0f, 0.0f, -attributes.gravity, 0.0f);
  return normalize(transformedGravity4.xyz) *
         length(vec3(0.0f, 0.0f, attributes.gravity)) * 0.0000001;
}

vec3 getAcceleration(vec3 position, vec3 velocity, uint currentIndex) {
  vec3 acceleration = vec3(0.0f);
  float density = particlesIn[currentIndex].density;
  float pressure = getPressure(density);

  for (uint i = 0; i < attributes.numberOfParticles; i++) {
    if (i == currentIndex) {
      continue; // Skip the current particle
    }

    vec3 neighborPosition = particlesIn[i].position.xyz;
    vec3 toParticle = position - neighborPosition;

    if (length(toParticle) <= attributes.smootingLength) {
      float neighborDensity = particlesIn[i].density;
      float neighborPressure = getPressure(neighborDensity);
      vec3 gradW = gradW(toParticle);
      float dP = pressure / (density * density) +
                 neighborPressure / (neighborDensity * neighborDensity);
      acceleration -=
          mass_ * dP * gradW * (1.0 - attributes.dampingAcceleration);
      acceleration -= attributes.damping * velocity;
    }
  }

  return acceleration + getGravity();
}

void checkBoundary(float dist) {
  float slowingFactor = -0.5f;
  if (position_.z < attributes.center.z - dist) {
    velocity_.z = slowingFactor * velocity_.z;
    position_.z = attributes.center.z - dist;
  } else if (position_.z > attributes.center.z + dist) {
    velocity_.z = slowingFactor * velocity_.z;
    position_.z = attributes.center.z + dist;
  }

  if (position_.y < attributes.center.y - dist) {
    velocity_.y = slowingFactor * velocity_.y;
    position_.y = attributes.center.y - dist;
  } else if (position_.y > attributes.center.y + dist) {
    velocity_.y = slowingFactor * velocity_.y;
    position_.y = attributes.center.y + dist;
  }

  if (position_.x < attributes.center.x - dist) {
    velocity_.x = slowingFactor * velocity_.x;
    position_.x = attributes.center.x - dist;
  } else if (position_.x > attributes.center.x + dist) {
    velocity_.x = slowingFactor * velocity_.x;
    position_.x = attributes.center.x + dist;
  }
}

void stageOne() {
  Particle currentParticle = particlesIn[gl_GlobalInvocationID.x];
  particlesOut[gl_GlobalInvocationID.x].density =
      getDensity(currentParticle.position.xyz);
}

void stageTwo() {
  Particle currentParticle = particlesIn[gl_GlobalInvocationID.x];
  if (currentParticle.movable > 0.0f)
    particlesOut[gl_GlobalInvocationID.x].acceleration =
        getAcceleration(currentParticle.position.xyz, currentParticle.velocity,
                        gl_GlobalInvocationID.x);
}

void stageThree() {
  Particle currentParticle = particlesIn[gl_GlobalInvocationID.x];
  if (currentParticle.movable > 0.0f) {
    velocity_ = currentParticle.velocity + currentParticle.acceleration *
                                               attributes.timeStep *
                                               mvp.deltaTime / 2.0f;
    position_ = currentParticle.position.xyz +
                currentParticle.velocity * attributes.timeStep * mvp.deltaTime;
    velocity_ += currentParticle.acceleration * attributes.timeStep *
                 mvp.deltaTime / 2.0f;
    checkBoundary(0.885f);
    particlesOut[gl_GlobalInvocationID.x].velocity =
        velocity_ * (1.0 - attributes.dampingVelocity);
    particlesOut[gl_GlobalInvocationID.x].position = vec4(position_, 1.0f);
  }
}

void main() {
  mass_ = attributes.mass * 0.000000000000002;
  if (constants.stageIndex == 1 && attributes.stop != 1) {
    stageOne();
  } else if (constants.stageIndex == 2 && attributes.stop != 1) {
    stageTwo();
  } else if (constants.stageIndex == 3 && attributes.stop != 1) {
    stageThree();
  } else {
    particlesOut[gl_GlobalInvocationID.x].velocity =
        particlesIn[gl_GlobalInvocationID.x].velocity;
    particlesOut[gl_GlobalInvocationID.x].position =
        particlesIn[gl_GlobalInvocationID.x].position;
  }
}